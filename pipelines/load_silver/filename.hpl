<?xml version="1.0" encoding="UTF-8"?>
<pipeline>
  <info>
    <name>filename</name>
    <name_sync_with_filename>Y</name_sync_with_filename>
    <description/>
    <extended_description/>
    <pipeline_version/>
    <pipeline_type>Normal</pipeline_type>
    <parameters>
    </parameters>
    <capture_transform_performance>N</capture_transform_performance>
    <transform_performance_capturing_delay>1000</transform_performance_capturing_delay>
    <transform_performance_capturing_size_limit>100</transform_performance_capturing_size_limit>
    <created_user>-</created_user>
    <created_date>2025/10/16 17:07:30.063</created_date>
    <modified_user>-</modified_user>
    <modified_date>2025/10/16 17:07:30.063</modified_date>
  </info>
  <notepads>
  </notepads>
  <order>
    <hop>
      <from>egressos</from>
      <to>JavaScript 2</to>
      <enabled>Y</enabled>
    </hop>
  </order>
  <transform>
    <name>JavaScript 2</name>
    <type>ScriptValueMod</type>
    <description/>
    <distribute>Y</distribute>
    <custom_distribution/>
    <copies>1</copies>
    <partitioning>
      <method>none</method>
      <schema_name/>
    </partitioning>
    <optimizationLevel>9</optimizationLevel>
    <jsScripts>
      <jsScript>
        <jsScript_type>0</jsScript_type>
        <jsScript_name>Script 1</jsScript_name>
        <jsScript_script>if(url_linkedin &amp;&amp; url_linkedin != 'N/I' &amp;&amp; url_linkedin != ''){
  url = url_linkedin.trim();
  // Remove protocolo duplicado e coloca tudo em lowercase
  url = url.replace(/^https?:\/\//i, '').toLowerCase();
  // Remove qualquer coisa antes de linkedin.com
  liIndex = url.lastIndexOf('linkedin.com');
  if (liIndex != -1) {
    url = url.slice(liIndex + 'linkedin.com'.length);
  }

  // Remove query params e barras extras
  url = url.split(/[\/?&amp;]/).filter(Boolean); // cria array de segmentos
 
  id = null;
  // Procura o segmento "in" se existir
  inPos = url.indexOf('in');
  if (inPos !== -1 &amp;&amp; inPos &lt; url.length - 1) {
    id = url[inPos + 1]; // pega o segmento logo após "in"
  } else {
    // Se não tiver "in", pega o último segmento
    id = url[url.length - 1];
  }
  url_linkedin_x = `https://www.linkedin.com/in/${id}`;

}</jsScript_script>
      </jsScript>
    </jsScripts>
    <fields>
      <field>
        <name>url</name>
        <rename>url</rename>
        <type>String</type>
        <length>-1</length>
        <precision>-1</precision>
        <replace>N</replace>
      </field>
      <field>
        <name>id</name>
        <rename>id</rename>
        <type>String</type>
        <length>-1</length>
        <precision>-1</precision>
        <replace>N</replace>
      </field>
      <field>
        <name>url_linkedin_x</name>
        <rename>url_linkedin_x</rename>
        <type>String</type>
        <length>-1</length>
        <precision>-1</precision>
        <replace>N</replace>
      </field>
    </fields>
    <attributes/>
    <GUI>
      <xloc>448</xloc>
      <yloc>144</yloc>
    </GUI>
  </transform>
  <transform>
    <name>egressos</name>
    <type>TableInput</type>
    <description/>
    <distribute>Y</distribute>
    <custom_distribution/>
    <copies>1</copies>
    <partitioning>
      <method>none</method>
      <schema_name/>
    </partitioning>
    <connection>BigQuery</connection>
    <execute_each_row>N</execute_each_row>
    <limit>0</limit>
    <sql>select distinct * from (
select distinct
   id_pessoa,
   nome,
   case when url_linkedin = '' or url_linkedin is null then 'N/I' else TRIM(UPPER(REGEXP_REPLACE(url_linkedin, r'[\r\n]+', ' ')))  end as url_linkedin,
   case when url_linkedin_id = '' or url_linkedin_id is null then 'N/I' else url_linkedin_id end as url_linkedin_id,
   case when empregado = '' or empregado is null then 'N/I' else empregado end as empregado,
   CAST(PARSE_DATE('%d/%m/%Y', atualizacao) as date) as atualizacao,
   observacoes
from
   `bronze_egressos.egressos_consolidado`
union distinct
select distinct
   le.id_pessoa,
   le.full_name as nome,
   case when le.linkedin_url = '' or le.linkedin_url is null then 'N/I' else TRIM(UPPER(REGEXP_REPLACE(le.linkedin_url, r'[\r\n]+', ' ')))  end as url_linkedin,
   case when le.linkedin_url = '' or le.linkedin_url is null then 'N/I' else le.linkedin_url end as url_linkedin_id,
   case when experience.data_fim is null then 'Empregado' else 'Desempregado' end as empregado,
   case when experience.data_fim is null then CURRENT_DATE() else  experience.data_fim end as  atualizacao,
   '' as observacoes
FROM `bronze_egressos.linkedin_enriquecidos` AS le
LEFT JOIN UNNEST(le.experiences) AS experience
where le.id_pessoa is not null) a
order by id_pessoa, atualizacao;</sql>
    <variables_active>N</variables_active>
    <attributes/>
    <GUI>
      <xloc>112</xloc>
      <yloc>144</yloc>
    </GUI>
  </transform>
  <transform_error_handling>
  </transform_error_handling>
  <attributes/>
</pipeline>
